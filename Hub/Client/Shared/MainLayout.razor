@using Hub.Shared.Model.Hub.Login;
@using Radzen
@using Radzen.Blazor
@using Blazored.LocalStorage

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject SignalRService SignalRService
@inject NotificationService NotificationService
@inject ILocalStorageService LocalStorage

<RadzenDialog />
<RadzenNotification />

@if (isLoggedIn)
{
    <div class="d-flex">
        <!-- Sidebar -->
        <div class="sidebar bg-light p-3">
            <NavMenu />
        </div>

        <!-- Main Content -->
        <main class="flex-grow-1 bg-light p-4" style="border-left: 2px solid #ddd;">
            @Body
        </main>
    </div>
}

@code {
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        string token = await LocalStorage.GetItemAsync<string>("jwtToken");
        isLoggedIn = !string.IsNullOrEmpty(token);
        Common.userData = await LocalStorage.GetItemAsync<ResponseXperpLogin>("userData");
        Common.loginData = await LocalStorage.GetItemAsync<ResonseLoginData>("loginData");
        if (!isLoggedIn)
        {
            NavigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }
        RequestXpErpBase user = new RequestXpErpBase()
        {
            aptCd = Common.userData.aptCd,
            userId = Common.userData.userId
        };
        SignalRService.Initialize(NavigationManager, LocalStorage);
        await SignalRService.StartConnectionAsync();
        await SignalRService.SendMethodAsync("Login", user);
        await SignalRService.JoinGroupAsync(Common.userData.aptCd);
        SignalRService.OnNotificationReceived += ShowNotification;

        StateHasChanged(); // 로그인 상태 업데이트
    }

    private void ShowNotification(string title, string message, NotificationSeverity severity)
    {
        InvokeAsync(() =>
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = severity,
                    Summary = title,
                    Detail = message,
                    Duration = 5000
                });
        });
    }

    public void Dispose()
    {
        SignalRService.OnNotificationReceived -= ShowNotification;
    }
}
